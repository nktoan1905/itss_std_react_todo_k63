[{"D:\\Learn\\itss_std_react_todo_k63\\src\\index.js":"1","D:\\Learn\\itss_std_react_todo_k63\\src\\App.js":"2","D:\\Learn\\itss_std_react_todo_k63\\src\\reportWebVitals.js":"3","D:\\Learn\\itss_std_react_todo_k63\\src\\components\\Todo.js":"4","D:\\Learn\\itss_std_react_todo_k63\\src\\components\\TodoItem.js":"5","D:\\Learn\\itss_std_react_todo_k63\\src\\components\\Filter.js":"6","D:\\Learn\\itss_std_react_todo_k63\\src\\components\\Input.js":"7","D:\\Learn\\itss_std_react_todo_k63\\src\\hooks\\storage.js":"8","D:\\Learn\\itss_std_react_todo_k63\\src\\lib\\util.js":"9","D:\\Learn\\itss_std_react_todo_k63\\src\\hooks\\fbStorage.js":"10","D:\\Learn\\itss_std_react_todo_k63\\src\\lib\\firebase.js":"11","D:\\Learn\\itss_std_react_todo_k63\\src\\components\\Login.js":"12","D:\\Learn\\itss_std_react_todo_k63\\src\\components\\Upload.js":"13"},{"size":517,"mtime":1655969325340,"results":"14","hashOfConfig":"15"},{"size":1678,"mtime":1656213941243,"results":"16","hashOfConfig":"15"},{"size":375,"mtime":1655969325341,"results":"17","hashOfConfig":"15"},{"size":1915,"mtime":1655977409161,"results":"18","hashOfConfig":"15"},{"size":650,"mtime":1655969325340,"results":"19","hashOfConfig":"15"},{"size":992,"mtime":1655969325339,"results":"20","hashOfConfig":"15"},{"size":887,"mtime":1655976499869,"results":"21","hashOfConfig":"15"},{"size":1019,"mtime":1655969325340,"results":"22","hashOfConfig":"15"},{"size":68,"mtime":1655969325341,"results":"23","hashOfConfig":"15"},{"size":1127,"mtime":1656432622953,"results":"24","hashOfConfig":"15"},{"size":3090,"mtime":1656432264652,"results":"25","hashOfConfig":"15"},{"size":430,"mtime":1656213135636,"results":"26","hashOfConfig":"15"},{"size":1783,"mtime":1656213852413,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"ydl495",{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"30"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"30"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"30"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"30"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"30"},"D:\\Learn\\itss_std_react_todo_k63\\src\\index.js",[],["61","62"],"D:\\Learn\\itss_std_react_todo_k63\\src\\App.js",[],"D:\\Learn\\itss_std_react_todo_k63\\src\\reportWebVitals.js",[],"D:\\Learn\\itss_std_react_todo_k63\\src\\components\\Todo.js",["63","64","65","66"],"import React, { useState } from \"react\";\r\n\r\n/* \r\n  【Todoのデータ構成】\r\n　・key：Todoを特定するID（String）\r\n　・text：Todoの内容（String）\r\n　・done：完了状態（Boolean true:完了済み,, false:未完了）\r\n*/\r\n\r\n/* コンポーネント */\r\nimport TodoItem from \"./TodoItem\";\r\nimport Input from \"./Input\";\r\nimport Filter from \"./Filter\";\r\n\r\n/* カスタムフック */\r\n// import useStorage from \"../hooks/storage\";\r\nimport useFbStorage from \"../hooks/fbStorage\";\r\n/* ライブラリ */\r\nimport { getKey } from \"../lib/util\";\r\n\r\nfunction Todo() {\r\n  const [items, addItem, updateItem, clearItems] = useFbStorage();\r\n\r\n  const [filter, setFilter] = React.useState(\"ALL\");\r\n\r\n  const displayItems = items.filter((item) => {\r\n    if (filter === \"ALL\") return true;\r\n    if (filter === \"TODO\") return !item.done;\r\n    if (filter === \"DONE\") return item.done;\r\n  });\r\n  const handleCheck = (checked) => {\r\n    // const newItems = items.map((item) => {\r\n    //   if (item.key === checked.key) {\r\n    //     item.done = !item.done;\r\n    //   }\r\n    //   return item;\r\n    // });\r\n    updateItem(checked);\r\n  };\r\n  const handleAdd = (text) => {\r\n  };\r\n  const handleFilterChange = (value) => setFilter(value);\r\n  return (\r\n    <div className=\"panel\">\r\n      <div className=\"panel-heading has-background-danger has-text-white\">\r\n        ITSS ToDoアプリ\r\n      </div>\r\n      <Input onAdd={addItem} />\r\n      <Filter onChange={handleFilterChange} value={filter} />\r\n      {displayItems.map((item) => (\r\n        <TodoItem key={item.id} item={item} onCheck={handleCheck}></TodoItem>\r\n      ))}\r\n      <div className=\"panel-block\">{items.length} items</div>\r\n      <div className=\"panel-block\">\r\n        <button className=\"button is-light is-fullwidth\" onClick={clearItems}>\r\n          全てのToDoを削除\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Todo;\r\n","D:\\Learn\\itss_std_react_todo_k63\\src\\components\\TodoItem.js",[],"D:\\Learn\\itss_std_react_todo_k63\\src\\components\\Filter.js",["67","68","69"],"/* \r\n  【Filterコンポーネント】\r\n　・該当するTodoをステータス毎にで分けてリスト表示する\r\n　・タブで表示する\r\n　・サポートするステータスは「すべて」「未完了」「完了済み」\r\n*/\r\nfunction Filter({ value, onChange }) {\r\n  const handleClick = (key, e) => {\r\n    e.preventDefault();\r\n    onChange(key);\r\n  };\r\n  return (\r\n    <div className=\"panel-tabs\">\r\n      <a\r\n        href=\"#\"\r\n        onClick={handleClick.bind(null, \"ALL\")}\r\n        className={value === \"ALL\" ? \"is-active\" : \"\"}\r\n      >\r\n        全て\r\n      </a>\r\n      <a\r\n        href=\"#\"\r\n        onClick={handleClick.bind(null, \"TODO\")}\r\n        className={value === \"TODO\" ? \"is-active\" : \"\"}\r\n      >\r\n        未完了\r\n      </a>\r\n      <a\r\n        href=\"#\"\r\n        onClick={handleClick.bind(null, \"DONE\")}\r\n        className={value === \"DONE\" ? \"is-active\" : \"\"}\r\n      >\r\n        完了済み\r\n      </a>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Filter;\r\n","D:\\Learn\\itss_std_react_todo_k63\\src\\components\\Input.js",["70"],"import React, { useState } from \"react\";\r\n/* \r\n  【inputコンポーネント】\r\n　・新しいTodoを作成するINPUTフィールドを作成するコンポーネント\r\n　・Enterをクリックされたら入力された文字を使って新しいTodoを作成する\r\n*/\r\nfunction Input({ onAdd }) {\r\n  const [text, setText] = React.useState(\"\");\r\n\r\n  const handleChange = (e) => setText(e.target.value);\r\n\r\n  const handleKeyDown = (e) => {\r\n    if (e.keyCode === 13) {\r\n      onAdd({\r\n        text: text,\r\n        done: false,\r\n      });\r\n      setText(\"\");\r\n    }\r\n  };\r\n  return (\r\n    <div className=\"panel-block\">\r\n      <input\r\n        class=\"input\"\r\n        type=\"text\"\r\n        placeholder=\"Todoを入力してください\"\r\n        value={text}\r\n        onChange={handleChange}\r\n        onKeyDown={handleKeyDown}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Input;\r\n","D:\\Learn\\itss_std_react_todo_k63\\src\\hooks\\storage.js",[],["71","72"],"D:\\Learn\\itss_std_react_todo_k63\\src\\lib\\util.js",[],"D:\\Learn\\itss_std_react_todo_k63\\src\\hooks\\fbStorage.js",["73"],"D:\\Learn\\itss_std_react_todo_k63\\src\\lib\\firebase.js",[],"D:\\Learn\\itss_std_react_todo_k63\\src\\components\\Login.js",["74"],"import React from \"react\";\r\nimport StyledFirebaseAuth from \"react-firebaseui/StyledFirebaseAuth\";\r\n\r\n/* ライブラリ */\r\nimport { firebase, auth, uiConfig } from \"../lib/firebase\";\r\n\r\nfunction Login() {\r\n  return (\r\n    <div className=\"column panel-block\">\r\n      <h1>My App</h1>\r\n      <p>Please sign-in:</p>\r\n      <StyledFirebaseAuth uiConfig={uiConfig} firebaseAuth={auth} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Login;\r\n","D:\\Learn\\itss_std_react_todo_k63\\src\\components\\Upload.js",["75"],"import React, { useState } from 'react'\r\n\r\n/* ライブラリ */\r\nimport { uploadImage } from \"../lib/firebase\";\r\n\r\nfunction Upload({ userImage, onSletctedImage }) {\r\n  const [isModal, setIsModal] = useState(false);\r\n  const active = isModal ? \"is-active\" : \"\";\r\n  const [imageUrl, setImageUrl] = useState(userImage);\r\n\r\n  const handleImage = async event => {\r\n    const image = event.target.files[0];\r\n    const imageUrl = await uploadImage(image);\r\n    onSletctedImage(imageUrl);\r\n    setImageUrl(imageUrl);\r\n  };\r\n\r\n  const handleClick = () => {\r\n    setIsModal(!isModal);\r\n  };\r\n\r\n  const ImageViewer = () => {\r\n    if (!imageUrl) {\r\n      return <i class=\"fas fa-user\"></i>\r\n    } else {\r\n      return (\r\n        <div>\r\n          <img src={imageUrl} />\r\n        </div>\r\n      )\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <div className={`modal ${active}`}>\r\n        <div class=\"modal-background\"></div>\r\n        <div class=\"modal-content\">\r\n          <div class=\"file is-boxed\" >\r\n            <label class=\"file-label\">\r\n              <input class=\"file-input\" type=\"file\" name=\"resume\" onChange={handleImage} />\r\n              <span class=\"file-cta\">\r\n                <span class=\"file-icon\">\r\n                  <i class=\"fas fa-upload\"></i>\r\n                </span>\r\n                <span class=\"file-label\">画像を選択してください</span>\r\n              </span>\r\n            </label>\r\n          </div>\r\n          <button class=\"modal-close is-large\" aria-label=\"close\" onClick={handleClick}></button>\r\n        </div>\r\n      </div>\r\n      <button onClick={handleClick} class=\"button is-primary is-inverted\">\r\n        <span class=\"icon\">\r\n          <ImageViewer />\r\n        </span>\r\n      </button>\r\n    </div >\r\n  );\r\n}\r\n\r\nexport default Upload\r\n\r\n\r\n",{"ruleId":"76","replacedBy":"77"},{"ruleId":"78","replacedBy":"79"},{"ruleId":"80","severity":1,"message":"81","line":1,"column":17,"nodeType":"82","messageId":"83","endLine":1,"endColumn":25},{"ruleId":"80","severity":1,"message":"84","line":19,"column":10,"nodeType":"82","messageId":"83","endLine":19,"endColumn":16},{"ruleId":"85","severity":1,"message":"86","line":26,"column":44,"nodeType":"87","messageId":"88","endLine":26,"endColumn":46},{"ruleId":"80","severity":1,"message":"89","line":40,"column":9,"nodeType":"82","messageId":"83","endLine":40,"endColumn":18},{"ruleId":"90","severity":1,"message":"91","line":14,"column":7,"nodeType":"92","endLine":18,"endColumn":8},{"ruleId":"90","severity":1,"message":"91","line":21,"column":7,"nodeType":"92","endLine":25,"endColumn":8},{"ruleId":"90","severity":1,"message":"91","line":28,"column":7,"nodeType":"92","endLine":32,"endColumn":8},{"ruleId":"80","severity":1,"message":"81","line":1,"column":17,"nodeType":"82","messageId":"83","endLine":1,"endColumn":25},{"ruleId":"76","replacedBy":"93"},{"ruleId":"78","replacedBy":"94"},{"ruleId":"85","severity":1,"message":"95","line":41,"column":22,"nodeType":"87","messageId":"96","endLine":41,"endColumn":24},{"ruleId":"80","severity":1,"message":"97","line":5,"column":10,"nodeType":"82","messageId":"83","endLine":5,"endColumn":18},{"ruleId":"98","severity":1,"message":"99","line":28,"column":11,"nodeType":"92","endLine":28,"endColumn":33},"no-native-reassign",["100"],"no-negated-in-lhs",["101"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'getKey' is defined but never used.","array-callback-return","Array.prototype.filter() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","'handleAdd' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement",["100"],["101"],"Array.prototype.map() expects a return value from arrow function.","expectedInside","'firebase' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","no-global-assign","no-unsafe-negation"]